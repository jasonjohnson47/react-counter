{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","count","setCount","amount","setAmount","direction","setDirection","isPaused","setIsPaused","increment","amt","decrement","useEffect","timerId","setTimeout","clearInterval","className","htmlFor","id","onChange","e","Number","target","value","aria-label","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qLA2GeA,MAxGf,WAAgB,IAAD,EACaC,mBAAS,GADtB,mBACNC,EADM,KACCC,EADD,OAEeF,mBAAS,GAFxB,mBAENG,EAFM,KAEEC,EAFF,OAGqBJ,mBAAS,MAH9B,mBAGNK,EAHM,KAGKC,EAHL,OAImBN,oBAAS,GAJ5B,mBAINO,EAJM,KAIIC,EAJJ,KAMPC,EAAY,SAACC,GACjBR,EAASD,EAAQS,IAEbC,EAAY,SAACD,GACjBR,EAASD,EAAQS,IAmBnB,OAhBAE,qBAAU,WACR,IAAMC,EAAUC,YAAW,WACpBP,IACe,OAAdF,EACFI,EAAUN,GAEVQ,EAAUR,MAGb,KAEH,OAAO,WACLY,cAAcF,OAKhB,sBAAKG,UAAU,MAAf,UACE,qBAAKA,UAAU,QAAf,SAAwBf,IACxB,sBAAKe,UAAU,aAAf,UACE,uBAAOC,QAAQ,SAAf,qBACA,uBACEC,GAAG,SACHC,SAAU,SAACC,GACThB,EAAUiB,OAAOD,EAAEE,OAAOC,SAE5BA,MAAOpB,OAGX,qCACE,gEACA,wBACEqB,aAAW,YACXC,QAAS,WACPd,EAAUR,IAHd,eAQA,wBACEqB,aAAW,YACXC,QAAS,WACPhB,EAAUN,IAHd,kBAUF,qCACE,iEACA,uBAAOc,QAAQ,YAAf,wBACA,yBACEM,MAAOlB,EACPc,SAAU,SAACC,GACTd,EAAac,EAAEE,OAAOC,QAH1B,UAME,wBAAQA,MAAM,KAAd,gBACA,wBAAQA,MAAM,OAAd,qBAEDhB,EACC,wBACEkB,QAAS,WACPjB,GAAY,IAFhB,sBAQA,wBACEiB,QAAS,WACPjB,GAAY,IAFhB,sBASJ,wBACEiB,QAAS,WACPvB,EAAS,GACTM,GAAY,IAHhB,6BCnFSkB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.1e9d69bb.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./styles.css\";\n\nfunction App() {\n  const [count, setCount] = useState(0);\n  const [amount, setAmount] = useState(1);\n  const [direction, setDirection] = useState(\"up\");\n  const [isPaused, setIsPaused] = useState(false);\n\n  const increment = (amt) => {\n    setCount(count + amt);\n  };\n  const decrement = (amt) => {\n    setCount(count - amt);\n  };\n\n  useEffect(() => {\n    const timerId = setTimeout(() => {\n      if (!isPaused) {\n        if (direction === \"up\") {\n          increment(amount);\n        } else {\n          decrement(amount);\n        }\n      }\n    }, 1000);\n\n    return function cleanup() {\n      clearInterval(timerId);\n    };\n  });\n\n  return (\n    <div className=\"App\">\n      <div className=\"count\">{count}</div>\n      <div className=\"form-group\">\n        <label htmlFor=\"amount\">Amount:</label>\n        <input\n          id=\"amount\"\n          onChange={(e) => {\n            setAmount(Number(e.target.value));\n          }}\n          value={amount}\n        />\n      </div>\n      <fieldset>\n        <legend>Manual Increment/Decrement</legend>\n        <button\n          aria-label=\"decrement\"\n          onClick={() => {\n            decrement(amount);\n          }}\n        >\n          -\n        </button>\n        <button\n          aria-label=\"increment\"\n          onClick={() => {\n            increment(amount);\n          }}\n        >\n          +\n        </button>\n      </fieldset>\n\n      <fieldset>\n        <legend>Automatic Counting Controls</legend>\n        <label htmlFor=\"direction\">Direction:</label>\n        <select\n          value={direction}\n          onChange={(e) => {\n            setDirection(e.target.value);\n          }}\n        >\n          <option value=\"up\">Up</option>\n          <option value=\"down\">Down</option>\n        </select>\n        {isPaused ? (\n          <button\n            onClick={() => {\n              setIsPaused(false);\n            }}\n          >\n            Continue\n          </button>\n        ) : (\n          <button\n            onClick={() => {\n              setIsPaused(true);\n            }}\n          >\n            Pause\n          </button>\n        )}\n      </fieldset>\n      <button\n        onClick={() => {\n          setCount(0);\n          setIsPaused(true);\n        }}\n      >\n        Reset Count\n      </button>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}